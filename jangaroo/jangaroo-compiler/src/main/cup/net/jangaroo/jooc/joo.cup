/*
 * Copyright 2008-2010 CoreMedia AG
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS
 * IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
 * express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */

/*
 * ActionScript 3 LALR(1) Grammar for the CUP parser generator
 *
 * Authors: Andreas Gawecki, Frank Wienberg
 */

package net.jangaroo.jooc;

import java.util.List;
import java.util.ArrayList;
import net.jangaroo.jooc.ast.*;
import net.jangaroo.jooc.input.*;
import net.jangaroo.jooc.mxml.*;
import net.jangaroo.jooc.mxml.ast.*;


action code {:

  MxmlParserHelper mxmlParserHelper() {
    return parser.mxmlParserHelper;
  }

  XmlTag createXmlTag(JooSymbol lt, Ide tagName, List<XmlAttribute> attributes, JooSymbol gt) {
    return mxmlParserHelper().createXmlTag(lt, tagName, attributes, gt);
  }

  XmlAttribute createXmlAttribute(Ide ide, JooSymbol eq, JooSymbol value) {
    return mxmlParserHelper().createXmlAttribute(ide, eq, value);
  }

  XmlElement createXmlElement(XmlTag openingMxmlTag, List children, XmlTag closingMxmlTag) {
    return mxmlParserHelper().createXmlElement(openingMxmlTag, children, closingMxmlTag);
  }

  CompilationUnit createCompilationUnit(XmlElement element) throws Exception {
    return mxmlParserHelper().createCompilationUnit(element);
  }

  JooSymbol[] toSymbolArray(List symbols) {
    return (JooSymbol[])symbols.toArray(new JooSymbol[symbols.size()]);
  }

:};

parser code {:

  final MxmlParserHelper mxmlParserHelper = new MxmlParserHelper((JooParser)this);

:}

terminal JooSymbol AS;
terminal JooSymbol BREAK;
terminal JooSymbol CASE, CATCH, CLASS, CONST, CONTINUE;
terminal JooSymbol DEFAULT, DELETE, DO;
terminal JooSymbol ELSE, EXTENDS;
terminal JooSymbol FINALLY, FOR, FUNCTION;
terminal JooSymbol IF, IMPLEMENTS, IMPORT, IN, INSTANCEOF, INTERFACE, INTERNAL, IS;
terminal JooSymbol NEW;
terminal JooSymbol PACKAGE, PRIVATE, PROTECTED, PUBLIC;
terminal JooSymbol RETURN;
terminal JooSymbol SUPER, SWITCH;
terminal JooSymbol THIS, THROW, TRY, TYPEOF;
terminal JooSymbol USE;
terminal JooSymbol VAR, VOID;
terminal JooSymbol WHILE, WITH;

terminal JooSymbol REST;
terminal JooSymbol PLUSPLUS, MINUSMINUS, PLUS, MINUS, NOT, DIV, MOD, MUL;
terminal JooSymbol LSHIFT, RSHIFT, URSHIFT;
terminal JooSymbol LT, GT, LTEQ, GTEQ;
terminal JooSymbol EQ, EQEQ, EQEQEQ, NOTEQ, NOTEQEQ;
terminal JooSymbol AND, BITNOT, XOR, OR, ANDAND, OROR;
terminal JooSymbol QUESTION, COLON, SEMICOLON, COMMA, DOT;
terminal JooSymbol MULTEQ, DIVEQ, MODEQ, PLUSEQ, MINUSEQ;
terminal JooSymbol NAMESPACESEP;
terminal JooSymbol LSHIFTEQ, RSHIFTEQ, URSHIFTEQ;
terminal JooSymbol ANDEQ, XOREQ, OREQ, ANDANDEQ, OROREQ;
terminal JooSymbol LPAREN, RPAREN, LBRACE, RBRACE, LBRACK, RBRACK;
terminal JooSymbol DOTLT;

terminal JooSymbol INT_LITERAL;
terminal JooSymbol FLOAT_LITERAL;
terminal JooSymbol BOOL_LITERAL;
terminal JooSymbol STRING_LITERAL;
terminal JooSymbol IDE;
terminal JooSymbol NULL_LITERAL;
terminal JooSymbol REGEXP_LITERAL;

terminal JooSymbol LT_QUESTION;
terminal JooSymbol QUESTION_GT;
terminal JooSymbol LT_SLASH;
terminal JooSymbol SLASH_GT;

// virtual tokens to mark the begin of a function, array or object literal expression
// inserted by parser if no other action is available
terminal JooSymbol FUNCTION_EXPR, LBRACK_EXPR, LBRACE_EXPR;

// virtual token to mark the begin of a regular expression literal
// inserted by parser if no other action is available
terminal JooSymbol REGEXP_START;

// virtual token to mark the beginning of an any type (disambiguate the any type "*" and operator "*=")
// inserted by parser if no other action is available
terminal JooSymbol TYPE_START;

// virtual tokens to handle the ECMA-262 restricted productions for semicolon insertion
terminal JooSymbol NO_LINE_TERMINATOR_HERE, NO_LINE_TERMINATOR_HERE_POSTFIX_OP;

// pseudo-terminals for precedence setting, never returned from scanner:
terminal JooSymbol PREFIX_PLUSPLUS, PREFIX_MINUSMINUS, PREFIX_PLUS, PREFIX_MINUS;

// pseudo-terminal carried in Scanner.ScanError, never returned by scanner:
terminal JooSymbol SCAN_ERROR;

nonterminal CommaSeparatedList arguments;
nonterminal ArrayLiteral arrayLiteral;
nonterminal CommaSeparatedList arrayLiteralFields;
nonterminal BlockStatement block;
nonterminal ArrayList catches;
nonterminal Catch catchClause;
nonterminal ClassBody classBody;
nonterminal Expr commaExpr;
nonterminal ArrayList classBodyDirectives;
nonterminal Directive classBodyDirective;
nonterminal ClassDeclaration classDeclaration;
nonterminal ArrayList optClassDeclarations;
nonterminal CompilationUnit compilationUnit;
nonterminal IdeDeclaration compilationUnitDeclaration;
nonterminal JooSymbol constOrVar;
nonterminal LiteralExpr literalExpr;
nonterminal Expr expr;
nonterminal Extends extends;
nonterminal NamespaceDeclaration namespaceDeclaration;
nonterminal FunctionExpr functionExpr;
nonterminal Ide ide;
nonterminal Implements implements;
nonterminal Implements interfaceExtends;
nonterminal Directive directive;
nonterminal ArrayList optDirectives;
nonterminal Expr lvalue;
nonterminal FunctionDeclaration functionDeclaration;
nonterminal JooSymbol modifier;
nonterminal ArrayList modifiers;
nonterminal CommaSeparatedList nonEmptyArguments;
nonterminal Parameters nonEmptyParameters;
nonterminal CommaSeparatedList nonEmptyObjectFields;
nonterminal ObjectField objectField;
nonterminal CommaSeparatedList objectFields;
nonterminal CommaSeparatedList nonEmptyAnnotationParameters;
nonterminal AnnotationParameter annotationParameter;
nonterminal CommaSeparatedList annotationParameters;
nonterminal ObjectLiteral objectLiteral;
nonterminal ArrayList optCatches;
nonterminal Expr optCommaExpr;
nonterminal Expr optExpr;
nonterminal Ide optIde;
nonterminal Initializer optInitializer;
nonterminal TypeRelation optTypeRelation;
nonterminal PackageDeclaration packageDeclaration;
nonterminal Parameter parameter;
nonterminal Parameters parameters;
nonterminal ParenthesizedExpr parenthesizedExpr;
nonterminal Ide qualifiedIde;
nonterminal Ide namespacedIde;
nonterminal Statement statement;
nonterminal ArrayList statements;
nonterminal Statement statementInSwitch;
nonterminal ArrayList statementsInSwitch;
nonterminal TypeRelation typeRelation;
nonterminal Type type;
nonterminal Type ideType;
nonterminal CommaSeparatedList ideList;
nonterminal VariableDeclaration variableDeclaration;
nonterminal VariableDeclaration forVariableDeclaration;
nonterminal VariableDeclaration optNextVariableDeclaration;
nonterminal CompilationUnit mxmlCompilationUnit;
nonterminal XmlHeader optXmlHeader;
nonterminal XmlElement mxmlElement;
nonterminal Ide namespacedXmlIde;
nonterminal XmlTag openingMxmlTag;
nonterminal XmlTag closedMxmlTag;
nonterminal XmlTag closingMxmlTag;
nonterminal List mxmlElements;
nonterminal List xmlAttributes;
nonterminal XmlAttribute xmlAttribute;

// see http://livedocs.adobe.com/flex/3/html/help.html?content=03_Language_and_Syntax_14.html#119081
/* 1 - Comma */
precedence left COMMA;
/* 2 - Assignment */
precedence right EQ, MULTEQ, DIVEQ, MODEQ, PLUSEQ, MINUSEQ, LSHIFTEQ, RSHIFTEQ, URSHIFTEQ, ANDEQ, XOREQ, OREQ, ANDANDEQ, OROREQ;
/* 3 - Conditional */
precedence right QUESTION, COLON;
/* 4 - Logical OR */
precedence left  OROR;
/* 5 - Logical AND */
precedence left  ANDAND;
/* 6 - Bitwise OR */
precedence left  OR;
/* 7 - Bitwise XOR */
precedence left  XOR;
/* 8 - Bitwise AND */
precedence left  AND;
/* 9 - Equality */
precedence left  EQEQ, NOTEQ, EQEQEQ, NOTEQEQ;
/* 10 - Relational */
precedence left LT, LTEQ, GT, GTEQ;
precedence left INSTANCEOF, IS, IN;
precedence left AS;
/* 11 - Bitwise shift */
precedence left LSHIFT, RSHIFT, URSHIFT;
/* 12 - Additive */
precedence left PLUS, MINUS;
/* 13 - Multiplicative */
precedence left MUL, DIV, MOD;
/* 14 - Unary */
precedence right PREFIX_PLUSPLUS, PREFIX_MINUSMINUS, PREFIX_PLUS, PREFIX_MINUS,
                 BITNOT, NOT, DELETE, TYPEOF, VOID;
/* 15 */
precedence left DOT, LPAREN, LBRACK, LBRACE;
/* 16 */
precedence left PLUSPLUS, MINUSMINUS, NO_LINE_TERMINATOR_HERE_POSTFIX_OP; /* postfix todo: use virtual terminals for postfix */
precedence right NAMESPACESEP, NEW;

start with compilationUnit;

arguments ::=
    {: RESULT = null; :}
  | nonEmptyArguments:args
    {: RESULT = args; :}
  ;

arrayLiteral ::=
  LBRACK_EXPR:lb arrayLiteralFields:f RBRACK:rb
    {: RESULT = new ArrayLiteral(lb,f,rb); :}
  ;

arrayLiteralFields ::=
    {: RESULT = null; :}
  |  expr:e
    {: RESULT = new CommaSeparatedList(e); :}
  | optExpr:e COMMA:c arrayLiteralFields:rest
    {: RESULT = new CommaSeparatedList(e,c,rest); :}
  ;

block ::=
  LBRACE:lb statements:s RBRACE:rb
    {: RESULT = new BlockStatement(lb,s,rb); :}
  ;

catches ::=
  catchClause:c
    {: RESULT = new ArrayList(1); RESULT.add(c); :}
  |  catches:l catchClause:c
    {: RESULT = l; l.add(c); :}
  ;

catchClause ::=
  CATCH:c LPAREN:lp parameter:p RPAREN:rp block:b
    {: RESULT = new Catch(c,lp,p,rp,b); :}
  ;

classBody ::=
  LBRACE:lb classBodyDirectives:decls RBRACE:rb
    {: RESULT = new ClassBody(lb, decls, rb); :}
  ;

classBodyDirectives ::=
    {: RESULT = new ArrayList(); :}
  | classBodyDirectives:list	classBodyDirective:decl
    {: RESULT = list; list.add(decl); :}
  ;

classBodyDirective ::=
    statement:s
    {: RESULT = s; :}
  | directive:d
    {: RESULT = d; :}
  ;

classDeclaration ::=
    modifiers:m CLASS:c ide:ide extends:e implements:i classBody:b
    {: RESULT = new ClassDeclaration(toSymbolArray(m),c,ide,e,i,b); :}
  | modifiers:m INTERFACE:i ide:ide interfaceExtends:ie classBody:b
    {: RESULT = new ClassDeclaration(toSymbolArray(m),i,ide,null,ie,b); :}
  ;

commaExpr ::=
    expr:e
    {: RESULT = e; :}
  | expr:e1 COMMA:op commaExpr:e2
    {: RESULT = new BinaryOpExpr(e1,op,e2); :}
  ;

compilationUnit ::=
    packageDeclaration:p LBRACE:lb optDirectives:ds compilationUnitDeclaration:c RBRACE:rb optClassDeclarations:cds
    {: RESULT = new CompilationUnit(p,lb,ds,c,rb, cds); :}
  | mxmlCompilationUnit:mxmlCompilationUnit
    {: RESULT = mxmlCompilationUnit; :}
  ;

compilationUnitDeclaration ::=
    classDeclaration:cd SEMICOLON:s
    {: RESULT = cd; :}
  | classDeclaration:cd
    {: RESULT = cd; :}
  | variableDeclaration:decl
    {: RESULT = decl; :}
  | functionDeclaration:decl
    {: RESULT = decl; :}
  | namespaceDeclaration:decl
    {: RESULT = decl; :}
  ;

optClassDeclarations ::=
    {: RESULT = new ArrayList(); :}
  | optDirectives:ds classDeclaration:cd optClassDeclarations:cds
    {: RESULT = cds; RESULT.add(0,cd); :}
  ;

constOrVar ::=
    CONST:c
    {: RESULT = c; :}
  | VAR:v
    {: RESULT = v; :}
  ;

directive ::=
    IMPORT:i qualifiedIde:ide SEMICOLON:s
    {: RESULT = new ImportDirective(i,ide, s); :}
  | IMPORT:i qualifiedIde:ide DOT:dot MUL:star SEMICOLON:s
    {: RESULT = new ImportDirective(i,new QualifiedIde(ide,dot,star),s); :}
  | LBRACK:lb ide:ide RBRACK:rb
    {: RESULT = new Annotation(lb, ide, rb); :}
  | LBRACK:lb ide:ide LPAREN:lb2 annotationParameters:ap RPAREN:rb2 RBRACK:rb
    {: RESULT = new Annotation(lb, ide, lb2, ap, rb2, rb); :}
  | USE:u ide:n qualifiedIde:namespace SEMICOLON:s
    {: RESULT = new UseNamespaceDirective(u, n.getIde(), namespace, s); :}
  ;

nonEmptyAnnotationParameters ::=
    annotationParameter:ap
    {: RESULT = new CommaSeparatedList(ap); :}
  | annotationParameter:ap COMMA:c nonEmptyAnnotationParameters:tail
    {: RESULT = new CommaSeparatedList(ap, c, tail); :}
  ;

annotationParameter ::=
    ide:name EQ:eq literalExpr:value
    {: RESULT = new AnnotationParameter(name,eq,value); :}
  | ide:name EQ:eq qualifiedIde:ide
    {: RESULT = new AnnotationParameter(name,eq,ide); :}
  | literalExpr:value
    {: RESULT = new AnnotationParameter(null,null,value); :}
  | ide:name
    {: RESULT = new AnnotationParameter(name,null,null); :}
  ;

annotationParameters ::=
    {: RESULT = null; :}
  | nonEmptyAnnotationParameters:f
    {: RESULT = f; :}
  ;

optDirectives ::=
    {: RESULT = new ArrayList(); :}
  | directive:d optDirectives:ds
    {: RESULT = ds; RESULT.add(0,d); :}
  ;

literalExpr ::=
    INT_LITERAL:l
    {: RESULT = new LiteralExpr(l); :}
  | FLOAT_LITERAL:l
    {: RESULT = new LiteralExpr(l); :}
  | BOOL_LITERAL:l
    {: RESULT = new LiteralExpr(l); :}
  | STRING_LITERAL:l
    {: RESULT = new LiteralExpr(l); :}
  | REGEXP_START REGEXP_LITERAL:l
    {: RESULT = new LiteralExpr(l); :}
  | NULL_LITERAL:l
    {: RESULT = new LiteralExpr(l); :}
  ;

expr ::=
    literalExpr:le
    {: RESULT = le; :}
  | objectLiteral:e
    {: RESULT = e; :}
  | arrayLiteral:v
    {: RESULT = v; :}
  | lvalue:v
    {: RESULT = v; :}
  | functionExpr:e
    {: RESULT = e; :}
  | THIS:t
    {: RESULT = new IdeExpr(t); :}
  | parenthesizedExpr:e
    {: RESULT = e; :}
  | NEW:n LT:lt type:t GT:gt arrayLiteral:v
    {: RESULT = new VectorLiteral(n, lt, t, gt, v); :}
  | NEW:n expr:t
    {: RESULT = new NewExpr(n,t); :}
  | PLUSPLUS:op expr:e
    {: RESULT = new PrefixOpExpr(op,e); :} %prec PREFIX_PLUSPLUS
  | MINUSMINUS:op expr:e
    {: RESULT = new PrefixOpExpr(op,e); :} %prec PREFIX_MINUSMINUS
  | PLUS:op expr:e
    {: RESULT = new PrefixOpExpr(op,e); :} %prec PREFIX_PLUS
  | MINUS:op expr:e
    {: RESULT = new PrefixOpExpr(op,e); :} %prec PREFIX_MINUS
  | NOT:op expr:e
    {: RESULT = new PrefixOpExpr(op,e); :}
  | BITNOT:op expr:e
    {: RESULT = new PrefixOpExpr(op,e); :}
  | TYPEOF:op expr:e
    {: RESULT = new PrefixOpExpr(op,e); :}
  | DELETE:op expr:e
    {: RESULT = new PrefixOpExpr(op,e); :}
  | expr:expr LPAREN:lp arguments:args RPAREN:rp
    {: RESULT = new ApplyExpr(expr,lp,args,rp); :}
  | expr:e AS:as expr:t
    {: RESULT = new AsExpr(e,as,t); :}
  | expr:e1 IS:is expr:e2
    {: RESULT = new IsExpr(e1,is,e2); :}
  | expr:e NO_LINE_TERMINATOR_HERE_POSTFIX_OP PLUSPLUS:op
    {: RESULT = new PostfixOpExpr(op,e); :}
  | expr:e NO_LINE_TERMINATOR_HERE_POSTFIX_OP MINUSMINUS:op
    {: RESULT = new PostfixOpExpr(op,e); :}
  | expr:e1 MUL:op expr:e2
    {: RESULT = new BinaryOpExpr(e1,op,e2); :}
  | expr:e1 DIV:op expr:e2
    {: RESULT = new BinaryOpExpr(e1,op,e2); :}
  | expr:e1 MOD:op expr:e2
    {: RESULT = new BinaryOpExpr(e1,op,e2); :}
  | expr:e1 PLUS:op expr:e2
    {: RESULT = new BinaryOpExpr(e1,op,e2); :}
  | expr:e1 MINUS:op expr:e2
    {: RESULT = new BinaryOpExpr(e1,op,e2); :}
  | expr:e1 LSHIFT:op expr:e2
    {: RESULT = new BinaryOpExpr(e1,op,e2); :}
  | expr:e1 RSHIFT:op expr:e2
    {: RESULT = new BinaryOpExpr(e1,op,e2); :}
  | expr:e1 URSHIFT:op expr:e2
    {: RESULT = new BinaryOpExpr(e1,op,e2); :}
  | expr:e1 LT:op expr:e2
    {: RESULT = new BinaryOpExpr(e1,op,e2); :}
  | expr:e1 GT:op expr:e2
    {: RESULT = new BinaryOpExpr(e1,op,e2); :}
  | expr:e1 LTEQ:op expr:e2
    {: RESULT = new BinaryOpExpr(e1,op,e2); :}
  | expr:e1 GTEQ:op expr:e2
    {: RESULT = new BinaryOpExpr(e1,op,e2); :}
  | expr:e1 INSTANCEOF:op expr:e2
    {: RESULT = new BinaryOpExpr(e1,op,e2); :}
  | expr:e1 EQEQ:op expr:e2
    {: RESULT = new BinaryOpExpr(e1,op,e2); :}
  | expr:e1 NOTEQ:op expr:e2
    {: RESULT = new BinaryOpExpr(e1,op,e2); :}
  | expr:e1 EQEQEQ:op expr:e2
    {: RESULT = new BinaryOpExpr(e1,op,e2); :}
  | expr:e1 NOTEQEQ:op expr:e2
    {: RESULT = new BinaryOpExpr(e1,op,e2); :}
  | expr:e1 AND:op expr:e2
    {: RESULT = new BinaryOpExpr(e1,op,e2); :}
  | expr:e1 XOR:op expr:e2
    {: RESULT = new BinaryOpExpr(e1,op,e2); :}
  | expr:e1 OR:op expr:e2
    {: RESULT = new BinaryOpExpr(e1,op,e2); :}
  | expr:e1 ANDAND:op expr:e2
    {: RESULT = new BinaryOpExpr(e1,op,e2); :}
  | expr:e1 OROR:op expr:e2
    {: RESULT = new BinaryOpExpr(e1,op,e2); :}
  | expr:e1 IN:op expr:e2
    {: RESULT = new BinaryOpExpr(e1,op,e2); :}
  | lvalue:lv EQ:op expr:e
    {: RESULT = new AssignmentOpExpr(lv,op,e); :}
  | lvalue:lv MULTEQ:op expr:e
    {: RESULT = new AssignmentOpExpr(lv,op,e); :}
  | lvalue:lv DIVEQ:op expr:e
    {: RESULT = new AssignmentOpExpr(lv,op,e); :}
  | lvalue:lv MODEQ:op expr:e
    {: RESULT = new AssignmentOpExpr(lv,op,e); :}
  | lvalue:lv PLUSEQ:op expr:e
    {: RESULT = new AssignmentOpExpr(lv,op,e); :}
  | lvalue:lv MINUSEQ:op expr:e
    {: RESULT = new AssignmentOpExpr(lv,op,e); :}
  | lvalue:lv LSHIFTEQ:op expr:e
    {: RESULT = new AssignmentOpExpr(lv,op,e); :}
  | lvalue:lv RSHIFTEQ:op expr:e
    {: RESULT = new AssignmentOpExpr(lv,op,e); :}
  | lvalue:lv URSHIFTEQ:op expr:e
    {: RESULT = new AssignmentOpExpr(lv,op,e); :}
  | lvalue:lv ANDEQ:op expr:e
    {: RESULT = new AssignmentOpExpr(lv,op,e); :}
  | lvalue:lv XOREQ:op expr:e
    {: RESULT = new AssignmentOpExpr(lv,op,e); :}
  | lvalue:lv OREQ:op expr:e
    {: RESULT = new AssignmentOpExpr(lv,op,e); :}
  | lvalue:lv ANDANDEQ:op expr:e
    {: RESULT = new AssignmentOpExpr(lv,op,e); :}
  | lvalue:lv OROREQ:op expr:e
    {: RESULT = new AssignmentOpExpr(lv,op,e); :}
  | expr:cond QUESTION:q expr:e1 COLON:c expr:e2
    {: RESULT = new ConditionalExpr(cond,q,e1,c,e2); :}
  ;

extends ::=
    {: RESULT = null; :}
  |
    EXTENDS:e qualifiedIde:ide
    {: RESULT = new Extends(e,ide); :}
  ;

interfaceExtends ::=
    {: RESULT = null; :}
  | EXTENDS:i ideList:l
    {: RESULT = new Implements(i,l); :}
  ;

namespaceDeclaration ::=
    modifiers:m EQ:eq STRING_LITERAL:l SEMICOLON:s
    {: RESULT = new NamespaceDeclaration(toSymbolArray(m.subList(0, m.size()-2)),
                                         (JooSymbol)m.get(m.size()-2), new Ide((JooSymbol)m.get(m.size()-1)),
                                         new Initializer(eq, new LiteralExpr(l)), s);
    :}
  ;

functionExpr ::=
    FUNCTION_EXPR:f optIde:ide LPAREN:lp parameters:params RPAREN:rp optTypeRelation:t block:b
    {: RESULT = new FunctionExpr(null,f,ide,lp,params,rp,t,b); :}
  ;

functionDeclaration ::=
    modifiers:m FUNCTION:f ide:ide LPAREN:lp parameters:params RPAREN:rp optTypeRelation:t block:b
    {: RESULT = new FunctionDeclaration(m,f,null,ide,lp,params,rp,t,b,null); :}
  | modifiers:m FUNCTION:f ide:ide LPAREN:lp parameters:params RPAREN:rp optTypeRelation:t SEMICOLON:s
    {: RESULT = new FunctionDeclaration(m,f,null,ide,lp,params,rp,t,null,s); :}
  | modifiers:m FUNCTION:f IDE:getOrSet ide:ide LPAREN:lp parameters:params RPAREN:rp optTypeRelation:t block:b
    {: RESULT = new FunctionDeclaration(m,f,getOrSet,ide,lp,params,rp,t,b,null); :}
  | modifiers:m FUNCTION:f IDE:getOrSet ide:ide LPAREN:lp parameters:params RPAREN:rp optTypeRelation:t SEMICOLON:s
    {: RESULT = new FunctionDeclaration(m,f,getOrSet,ide,lp,params,rp,t,null,s); :}
  ;

ide ::=
    IDE:ide
    {: RESULT = new Ide(ide); :}
  ;

implements ::=
    {: RESULT = null; :}
  | IMPLEMENTS:i ideList:l
    {: RESULT = new Implements(i,l); :}
  ;

lvalue ::=
    qualifiedIde:ide
    {: RESULT = new IdeExpr(ide); :}
  | modifier:namespace NAMESPACESEP:sep IDE:ide
    {: RESULT = new IdeExpr(new NamespacedIde(namespace, sep, ide)); :}
  | THIS:s DOT:d namespacedIde:ide
    {: RESULT = IdeExpr.fromPrefix(s,d,ide); :}
  | SUPER:s DOT:d namespacedIde:ide
    {: RESULT = IdeExpr.fromPrefix(s,d,ide); :}
  | expr:e DOT:d namespacedIde:ide
    {: RESULT = new DotExpr(e,d,ide); :}
  | expr:expr LBRACK:lb commaExpr:index RBRACK:rb
    {: RESULT = new ArrayIndexExpr(expr,lb,index,rb); :}
  ;

modifier ::=
    PUBLIC:s
    {: RESULT = s; :}
  | PROTECTED:s
    {: RESULT = s; :}
  | PRIVATE:s
    {: RESULT = s; :}
  | INTERNAL:s
    {: RESULT = s; :}
  /* syntactic keyword modifier or a namespace: */
  | ide:ide
    {: RESULT = ide.getIde(); :}
  ;

modifiers ::=
    {: RESULT = new ArrayList(); :}
  | modifier:m modifiers:list
    {: RESULT = list; list.add(0, m); :}
  ;

namespacedIde ::=
    ide:ide
    {: RESULT = ide; :}
  | modifier:namespace NAMESPACESEP:sep IDE:ide
    {: RESULT = new NamespacedIde(namespace, sep, ide); :}
  ;

nonEmptyArguments ::=
    expr:arg
    {: RESULT = new CommaSeparatedList(arg); :}
  | expr:arg COMMA:c nonEmptyArguments:args
    {: RESULT = new CommaSeparatedList(arg,c,args); :}
  ;

nonEmptyParameters ::=
    parameter:param
    {: RESULT = new Parameters(param); :}
  | REST:rest ide:ide optTypeRelation:t
    {: RESULT = new Parameters(new Parameter(rest,ide,t,null)); :}
  | parameter:param COMMA:c nonEmptyParameters:params
    {: RESULT = new Parameters(param, c, params); :}
  ;

nonEmptyObjectFields ::=
    objectField:f
    {: RESULT = new CommaSeparatedList(f); :}
  | objectField:f COMMA:c nonEmptyObjectFields:tail
    {: RESULT = new CommaSeparatedList(f, c, tail); :}
  ;

objectField ::=
    ide:name COLON:c expr:value
    {: RESULT = new ObjectField(name,c,value); :}
  | STRING_LITERAL:l COLON:c expr:value
    {: RESULT = new ObjectField(new LiteralExpr(l),c,value); :}
  | INT_LITERAL:l COLON:c expr:value
    {: RESULT = new ObjectField(new LiteralExpr(l),c,value); :}
  ;

objectFields ::=
    {: RESULT = null; :}
  | nonEmptyObjectFields:f
    {: RESULT = f; :}
  ;

objectLiteral ::=
    LBRACE_EXPR:lb objectFields:fields RBRACE:rb
    {: RESULT = new ObjectLiteral(lb,fields,null,rb); :}
  ;

optCatches ::=
    {: RESULT = new ArrayList(); :}
  | catches:c
    {: RESULT = c; :}
  ;

optCommaExpr ::=
    {: RESULT = null; :}
  | commaExpr:e
    {: RESULT = e; :}
  ;

optExpr ::=
    {: RESULT = null; :}
  | expr:e
    {: RESULT = e; :}
  ;

optIde ::=
    {: RESULT = null; :}
  | ide:ide
    {: RESULT = ide; :}
  ;

optInitializer ::=
    {: RESULT = null; :}
  | EQ:eq expr:expr
    {: RESULT = new Initializer(eq,expr); :}
  ;

optTypeRelation ::=
    {: RESULT = null; :}
  | typeRelation:t
    {: RESULT = t; :}
  ;

packageDeclaration ::=
    PACKAGE:p
    {: RESULT = new PackageDeclaration(p,null); :}
  | PACKAGE:p qualifiedIde:qide
    {: RESULT = new PackageDeclaration(p,qide); :}
  ;

parameter ::=
    ide:ide optTypeRelation:t optInitializer:init
    {: RESULT = new Parameter(null,ide,t,init); :}
  ;

parameters ::=
    {: RESULT = null; :}
  | nonEmptyParameters:params
    {: RESULT = params; :}
  ;

parenthesizedExpr ::=
    LPAREN:lp expr:e RPAREN:rp
    {: RESULT = new ParenthesizedExpr(lp,e,rp); :}
  ;

qualifiedIde ::=
    ide:ide
    {: RESULT = ide; :}
  | IDE:ide DOTLT:dotlt type:t GT:gt
    {: RESULT = new IdeWithTypeParam(ide, dotlt, t, gt); :}
  | qualifiedIde:prefix DOT:d namespacedIde:ide
    {: RESULT = new QualifiedIde(prefix, d, ide.getIde()); :}
  ;

statement ::=
    SEMICOLON:s
    {: RESULT = new EmptyStatement(s); :}
  | commaExpr:e SEMICOLON:s
    {: RESULT = new SemicolonTerminatedStatement(e,s); :}
  | ide:ide COLON:c statement:s
    {: RESULT = new LabeledStatement(ide,c,s); :}
  | variableDeclaration:decl
    {: RESULT = decl; :}
  | BREAK:b SEMICOLON:s
    {: RESULT = new BreakStatement(b,null,s); :}
  | BREAK:b NO_LINE_TERMINATOR_HERE ide:ide SEMICOLON:s
    {: RESULT = new BreakStatement(b,ide,s); :}
  | CONTINUE:c SEMICOLON:s
    {: RESULT = new ContinueStatement(c,null,s); :}
  | CONTINUE:c NO_LINE_TERMINATOR_HERE ide:ide SEMICOLON:s
    {: RESULT = new ContinueStatement(c,ide,s); :}
  | RETURN:r  SEMICOLON:s
    {: RESULT = new ReturnStatement(r,null,s); :}
  | RETURN:r  NO_LINE_TERMINATOR_HERE expr:e SEMICOLON:s
    {: RESULT = new ReturnStatement(r,e,s); :}
  | THROW:t NO_LINE_TERMINATOR_HERE commaExpr:e SEMICOLON:s
    {: RESULT = new ThrowStatement(t,e,s); :}
  | SUPER:sup LPAREN:lp arguments:args RPAREN:rp SEMICOLON:s
    {: RESULT = new SuperConstructorCallStatement(sup,lp,args,rp, s); :}
  | IF:i parenthesizedExpr:cond statement:ts ELSE:e statement:es
    {: RESULT = new IfStatement(i,cond,ts,e,es); :}
  | IF:i parenthesizedExpr:cond statement:ts
    {: RESULT = new IfStatement(i,cond,ts); :}
  | SWITCH:sw parenthesizedExpr:expr LBRACE:lb statementsInSwitch:s RBRACE:rb
    {: RESULT = new SwitchStatement(sw,expr,lb,s,rb); :}
  | WHILE:w parenthesizedExpr:e statement:s
    {: RESULT = new WhileStatement(w,e,s); :}
  | DO:d statement:s WHILE:w parenthesizedExpr:e SEMICOLON:sc
    {: RESULT = new DoStatement(d,s,w,e,sc); :}
  | FOR:f LPAREN:lp SEMICOLON:s1 optCommaExpr:e1 SEMICOLON:s2 optCommaExpr:e2 RPAREN:rp statement:s
    {: RESULT = new ForStatement(f,lp,null,s1,e1,s2,e2,rp,s); :}
  | FOR:f LPAREN:lp commaExpr:e SEMICOLON:s1 optCommaExpr:e1 SEMICOLON:s2 optCommaExpr:e2 RPAREN:rp statement:s
    {: RESULT = new ForStatement(f,lp,new ForInitializer(e),s1,e1,s2,e2,rp,s); :}
  | FOR:f LPAREN:lp forVariableDeclaration:vd SEMICOLON:s1 optCommaExpr:e1 SEMICOLON:s2 optCommaExpr:e2 RPAREN:rp statement:s
    {: RESULT = new ForStatement(f,lp,new ForInitializer(vd),s1,e1,s2,e2,rp,s); :}
  | FOR:f LPAREN:lp lvalue:lv IN:in expr:e RPAREN:rp statement:s
    {: RESULT = new ForInStatement(f,null,lp,lv,in,e,rp,s); :}
  | FOR:f LPAREN:lp VAR:var ide:ide optTypeRelation:t IN:in expr:e RPAREN:rp statement:s
    {: RESULT = new ForInStatement(f,null,lp,new VariableDeclaration(var,ide,t,null),in,e,rp,s); :}
  | FOR:f IDE:each LPAREN:lp lvalue:lv IN:in expr:e RPAREN:rp statement:s
    {: RESULT = new ForInStatement(f,each,lp,lv,in,e,rp,s); :}
  | FOR:f IDE:ea LPAREN:lp VAR:var ide:ide optTypeRelation:t IN:in expr:e RPAREN:rp statement:s
    {: RESULT = new ForInStatement(f,ea,lp,new VariableDeclaration(var,ide,t,null),in,e,rp,s); :}
  | TRY:t block:b catches:c
    {: RESULT = new TryStatement(t,b,c); :}
  | TRY:t block:b optCatches:c FINALLY:f block:fb
    {: RESULT = new TryStatement(t,b,c,f,fb); :}
  | block:b
    {: RESULT = b; :}
  | functionDeclaration:fs
    {: RESULT = fs; :}
  ;

statements ::=
    {: RESULT = new ArrayList(); :}
  | statements:l statement:s
    {: RESULT = l; l.add(s); :}
  ;

statementInSwitch ::=
    statement:s
    {: RESULT = s; :}
  | CASE:cs expr:e COLON:col
    {: RESULT = new CaseStatement(cs,e,col); :}
  | DEFAULT:d COLON:col
    {: RESULT = new DefaultStatement(d,col); :}
  ;

statementsInSwitch ::=
    {: RESULT = new ArrayList(); :}
  | statementsInSwitch:l statementInSwitch:s
    {: RESULT = l; l.add(s); :}
  ;

type ::=
    ideType:it
    {: RESULT = it; :}
  | MUL:any
    {: RESULT = new Type(any); :}
  | VOID:v
    {: RESULT = new Type(v); :}
  ;

ideType ::=
    qualifiedIde:ide
    {: RESULT = new Type(ide); :}
  ;

ideList ::=
    qualifiedIde:ide
    {: RESULT = new CommaSeparatedList<Ide>(ide); :}
  | qualifiedIde:ide COMMA:c ideList:l
    {: RESULT = new CommaSeparatedList<Ide>(ide,c,l); :}
  ;

typeRelation ::=
    COLON:s type:t
    {: RESULT = new TypeRelation(s,t); :}
  | COLON:s TYPE_START type:t
    {: RESULT = new TypeRelation(s, t); :}
  ;

forVariableDeclaration ::=
  VAR:v ide:ide optTypeRelation:t optInitializer:init optNextVariableDeclaration:nf
    {: RESULT = new VariableDeclaration(v, ide, t, init, nf); :}
  ;

variableDeclaration ::=
  modifiers:m constOrVar:cov ide:ide optTypeRelation:t optInitializer:init optNextVariableDeclaration:nf SEMICOLON:s
    {: RESULT = new VariableDeclaration(toSymbolArray(m), cov, ide, t, init, nf, s); :}
  ;

optNextVariableDeclaration ::=
    {: RESULT = null; :}
  | COMMA:c ide:ide optTypeRelation:t optInitializer:init optNextVariableDeclaration:nv
    {: RESULT = new VariableDeclaration(c, ide, t, init, nv); :}
  ;

mxmlCompilationUnit ::=
    optXmlHeader:optXmlHeader mxmlElement:rootElement
    {: RESULT = createCompilationUnit(rootElement); :}
  ;

/* <?xml version="..."?> */
optXmlHeader ::=
    {: RESULT = null; :}
  | LT_QUESTION:ltQuestion ide:xmlIde xmlAttributes:attributes QUESTION_GT:questionGt
    {: XmlHeader.verifyXmlHeader(xmlIde, attributes); :}
  ;

mxmlElement ::=
    closedMxmlTag:closedMxmlTag
    {: RESULT = createXmlElement(closedMxmlTag, null, null); :}
  | openingMxmlTag:openingMxmlTag mxmlElements:children closingMxmlTag:closingMxmlTag
    {: RESULT = createXmlElement(openingMxmlTag, children, closingMxmlTag); :}
  ;

mxmlElements ::=
    {: RESULT = new ArrayList(); :}
  | mxmlElements:l mxmlElement:e
    {: RESULT = l; l.add(e); :}
  | mxmlElements:l STRING_LITERAL:cdata
    {: RESULT = l; l.add(cdata); :}
  ;

xmlAttribute ::=
    namespacedXmlIde:ide EQ:eq STRING_LITERAL:value
    {: RESULT = createXmlAttribute(ide, eq, value); :}
  ;

xmlAttributes ::=
    {: RESULT = new ArrayList(); :}
  | xmlAttributes:l xmlAttribute:a
    {: RESULT = l; l.add(a); :}
  ;

namespacedXmlIde ::=
    IDE:ide
    {: RESULT = new Ide(ide); :}
  | IDE:namespacePrefix COLON:colon IDE:ide
    {: RESULT = new NamespacedIde(namespacePrefix, colon, ide); :}
  ;

openingMxmlTag ::=
    LT:lt namespacedXmlIde:tagName xmlAttributes:attributes GT:gt
    {: RESULT = createXmlTag(lt, tagName, attributes, gt); :}
  ;

closedMxmlTag ::=
    LT:lt namespacedXmlIde:tagName xmlAttributes:attributes SLASH_GT:slashGt
    {: RESULT = createXmlTag(lt, tagName, attributes, slashGt); :}
  ;

closingMxmlTag ::=
    LT_SLASH:lt namespacedXmlIde:tagName GT:gt
    {: RESULT = createXmlTag(lt, tagName, null, gt); :}
  ;
